BEGIN
CREATE TABLE
CREATE TABLE
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=2003.23..2003.53 rows=20 width=44) (actual time=31.324..31.324 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=2003.23..2003.53 rows=20 width=44) (actual time=31.171..31.180 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=2003.23..2003.28 rows=20 width=44) (actual time=31.162..31.168 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=2003.23..2006.30 rows=1230 width=44) (actual time=31.155..31.158 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=1958.20..1970.50 rows=1230 width=44) (actual time=31.115..31.124 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Right Join  (cost=191.20..1658.20 rows=30000 width=44) (actual time=1.536..20.778 rows=30000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (u.state = st.id)
                                 ->  Hash Join  (cost=153.52..1208.02 rows=30000 width=12) (actual time=1.433..14.888 rows=30000 loops=1)
                                       Output: u.state, s.quantity, s.price
                                       Hash Cond: (s.uid = u.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=12) (actual time=0.003..2.629 rows=30000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=91.01..91.01 rows=5001 width=8) (actual time=1.422..1.422 rows=5001 loops=1)
                                             Output: u.id, u.state
                                             Buckets: 1024  Batches: 1  Memory Usage: 196kB
                                             ->  Seq Scan on public.users u  (cost=0.00..91.01 rows=5001 width=8) (actual time=0.002..0.689 rows=5001 loops=1)
                                                   Output: u.id, u.state
                                 ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.093..0.093 rows=50 loops=1)
                                       Output: st.name, st.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                       ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.007..0.043 rows=50 loops=1)
                                             Output: st.name, st.id
 Total runtime: 31.447 ms
(30 rows)

                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=1523.85..1524.00 rows=10 width=17) (actual time=17.502..17.502 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1523.85..1524.00 rows=10 width=17) (actual time=17.403..17.408 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=1523.85..1523.87 rows=10 width=17) (actual time=17.401..17.402 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1523.85..1548.85 rows=10000 width=17) (actual time=17.399..17.399 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  HashAggregate  (cost=1207.75..1307.75 rows=10000 width=17) (actual time=17.351..17.377 rows=100 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Hash Right Join  (cost=3.25..907.75 rows=30000 width=17) (actual time=0.032..8.864 rows=30000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Hash Cond: (s.pid = p.id)
                                 ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=12) (actual time=0.003..2.100 rows=30000 loops=1)
                                       Output: s.id, s.uid, s.pid, s.quantity, s.price
                                 ->  Hash  (cost=2.00..2.00 rows=100 width=9) (actual time=0.025..0.025 rows=100 loops=1)
                                       Output: p.name, p.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 5kB
                                       ->  Seq Scan on public.products p  (cost=0.00..2.00 rows=100 width=9) (actual time=0.003..0.012 rows=100 loops=1)
                                             Output: p.name, p.id
 Total runtime: 17.559 ms
(22 rows)

                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=29298.50..29348.50 rows=5000 width=16) (actual time=19.183..19.235 rows=200 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Hash Join  (cost=6255.13..19206.44 rows=1009206 width=16) (actual time=18.195..18.612 rows=1407 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Hash Cond: (p.id = s.pid)
         ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.002..0.003 rows=10 loops=1)
               Output: p.name, p.id, p.price
         ->  Hash  (cost=4080.11..4080.11 rows=174001 width=16) (actual time=18.109..18.109 rows=13247 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Buckets: 32768  Batches: 1  Memory Usage: 621kB
               ->  Hash Join  (cost=1020.52..4080.11 rows=174001 width=16) (actual time=9.978..15.551 rows=13247 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Hash Cond: (u.id = s.uid)
                     ->  Hash Join  (cost=153.52..639.18 rows=29006 width=8) (actual time=1.319..2.279 rows=2166 loops=1)
                           Output: u.state, u.id
                           Hash Cond: (st.id = u.state)
                           ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.002..0.009 rows=20 loops=1)
                                 Output: st.name, st.id, st.price
                           ->  Hash  (cost=91.01..91.01 rows=5001 width=8) (actual time=1.310..1.310 rows=5001 loops=1)
                                 Output: u.state, u.id
                                 Buckets: 1024  Batches: 1  Memory Usage: 196kB
                                 ->  Seq Scan on public.users u  (cost=0.00..91.01 rows=5001 width=8) (actual time=0.004..0.620 rows=5001 loops=1)
                                       Output: u.state, u.id
                     ->  Hash  (cost=492.00..492.00 rows=30000 width=16) (actual time=8.648..8.648 rows=30000 loops=1)
                           Output: s.pid, s.quantity, s.price, s.uid
                           Buckets: 4096  Batches: 1  Memory Usage: 1407kB
                           ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=16) (actual time=0.004..3.709 rows=30000 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
 Total runtime: 19.477 ms
(29 rows)

COMMIT
