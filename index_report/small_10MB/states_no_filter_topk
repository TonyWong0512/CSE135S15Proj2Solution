BEGIN
CREATE TABLE
CREATE TABLE
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=1659.49..1659.79 rows=20 width=44) (actual time=34.006..34.006 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1659.49..1659.79 rows=20 width=44) (actual time=33.852..33.858 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=1659.49..1659.54 rows=20 width=44) (actual time=33.848..33.852 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1659.49..1662.57 rows=1230 width=44) (actual time=33.848..33.851 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=1614.46..1626.76 rows=1230 width=44) (actual time=33.805..33.814 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Join  (cost=259.96..1314.46 rows=30000 width=44) (actual time=3.054..23.632 rows=30000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (s.uid = u.id)
                                 ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=12) (actual time=0.005..3.173 rows=30000 loops=1)
                                       Output: s.id, s.uid, s.pid, s.quantity, s.price
                                 ->  Hash  (cost=197.45..197.45 rows=5001 width=40) (actual time=3.042..3.042 rows=5001 loops=1)
                                       Output: st.name, st.id, u.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 251kB
                                       ->  Hash Join  (cost=37.67..197.45 rows=5001 width=40) (actual time=0.669..2.135 rows=5001 loops=1)
                                             Output: st.name, st.id, u.id
                                             Hash Cond: (u.state = st.id)
                                             ->  Seq Scan on public.users u  (cost=0.00..91.01 rows=5001 width=8) (actual time=0.003..0.402 rows=5001 loops=1)
                                                   Output: u.id, u.name, u.role, u.age, u.state
                                             ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.654..0.654 rows=50 loops=1)
                                                   Output: st.name, st.id
                                                   Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                                   ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.628..0.635 rows=50 loops=1)
                                                         Output: st.name, st.id
 Total runtime: 34.134 ms
(30 rows)

                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=1523.85..1524.00 rows=10 width=17) (actual time=24.664..24.664 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1523.85..1524.00 rows=10 width=17) (actual time=23.853..23.906 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=1523.85..1523.87 rows=10 width=17) (actual time=23.850..23.882 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1523.85..1548.85 rows=10000 width=17) (actual time=23.848..23.861 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  HashAggregate  (cost=1207.75..1307.75 rows=10000 width=17) (actual time=23.799..23.829 rows=100 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Hash Join  (cost=3.25..907.75 rows=30000 width=17) (actual time=0.032..12.796 rows=30000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Hash Cond: (s.pid = p.id)
                                 ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=12) (actual time=0.004..3.103 rows=30000 loops=1)
                                       Output: s.id, s.uid, s.pid, s.quantity, s.price
                                 ->  Hash  (cost=2.00..2.00 rows=100 width=9) (actual time=0.025..0.025 rows=100 loops=1)
                                       Output: p.name, p.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 5kB
                                       ->  Seq Scan on public.products p  (cost=0.00..2.00 rows=100 width=9) (actual time=0.003..0.015 rows=100 loops=1)
                                             Output: p.name, p.id
 Total runtime: 24.728 ms
(22 rows)

                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=29298.50..29348.50 rows=5000 width=16) (actual time=18.565..18.596 rows=200 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Hash Join  (cost=6255.13..19206.44 rows=1009206 width=16) (actual time=17.626..18.203 rows=1407 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Hash Cond: (p.id = s.pid)
         ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.002..0.006 rows=10 loops=1)
               Output: p.name, p.id, p.price
         ->  Hash  (cost=4080.11..4080.11 rows=174001 width=16) (actual time=17.558..17.558 rows=13247 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Buckets: 32768  Batches: 1  Memory Usage: 621kB
               ->  Hash Join  (cost=1020.52..4080.11 rows=174001 width=16) (actual time=9.898..14.863 rows=13247 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Hash Cond: (u.id = s.uid)
                     ->  Hash Join  (cost=153.52..639.18 rows=29006 width=8) (actual time=1.335..1.918 rows=2166 loops=1)
                           Output: u.state, u.id
                           Hash Cond: (st.id = u.state)
                           ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.001..0.009 rows=20 loops=1)
                                 Output: st.name, st.id, st.price
                           ->  Hash  (cost=91.01..91.01 rows=5001 width=8) (actual time=1.327..1.327 rows=5001 loops=1)
                                 Output: u.state, u.id
                                 Buckets: 1024  Batches: 1  Memory Usage: 196kB
                                 ->  Seq Scan on public.users u  (cost=0.00..91.01 rows=5001 width=8) (actual time=0.003..0.629 rows=5001 loops=1)
                                       Output: u.state, u.id
                     ->  Hash  (cost=492.00..492.00 rows=30000 width=16) (actual time=8.540..8.540 rows=30000 loops=1)
                           Output: s.pid, s.quantity, s.price, s.uid
                           Buckets: 4096  Batches: 1  Memory Usage: 1407kB
                           ->  Seq Scan on public.sales s  (cost=0.00..492.00 rows=30000 width=16) (actual time=0.004..3.628 rows=30000 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
 Total runtime: 18.858 ms
(29 rows)

COMMIT
