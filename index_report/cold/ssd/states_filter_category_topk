BEGIN
SET
CREATE TABLE
CREATE TABLE
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=897985.79..897986.09 rows=20 width=44) (actual time=14190.978..14190.978 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=897985.79..897986.09 rows=20 width=44) (actual time=14190.861..14190.866 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=897985.79..897985.84 rows=20 width=44) (actual time=14190.857..14190.860 rows=20 loops=1)
               Output: st.name, st.id, (sum((s2.quantity * s2.price)))
               ->  Sort  (cost=897985.79..897988.86 rows=1230 width=44) (actual time=14190.855..14190.857 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s2.quantity * s2.price)))
                     Sort Key: (sum((s2.quantity * s2.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=897940.76..897953.06 rows=1230 width=44) (actual time=14190.809..14190.817 rows=50 loops=1)
                           Output: st.name, st.id, sum((s2.quantity * s2.price))
                           ->  Hash Right Join  (cost=174659.38..885773.26 rows=1216750 width=44) (actual time=2366.386..13731.521 rows=1217476 loops=1)
                                 Output: st.name, st.id, s2.quantity, s2.price
                                 Hash Cond: (u.state = st.id)
                                 ->  Hash Join  (cost=174621.71..869005.27 rows=1216750 width=12) (actual time=2365.942..13429.386 rows=1217476 loops=1)
                                       Output: u.state, s2.quantity, s2.price
                                       Hash Cond: (s2.uid = u.id)
                                       ->  Hash Join  (cost=923.69..641077.19 rows=1216750 width=12) (actual time=36.966..8874.552 rows=1217476 loops=1)
                                             Output: s2.quantity, s2.price, s2.uid
                                             Hash Cond: (s2.pid = p.id)
                                             ->  Seq Scan on public.sales s2  (cost=0.00..409236.00 rows=25000000 width=16) (actual time=0.528..3623.567 rows=25000000 loops=1)
                                                   Output: s2.id, s2.uid, s2.pid, s2.quantity, s2.price
                                             ->  Hash  (cost=862.85..862.85 rows=4867 width=4) (actual time=36.387..36.387 rows=4861 loops=1)
                                                   Output: p.id
                                                   Buckets: 1024  Batches: 1  Memory Usage: 171kB
                                                   ->  Bitmap Heap Scan on public.products p  (cost=66.01..862.85 rows=4867 width=4) (actual time=2.644..35.230 rows=4861 loops=1)
                                                         Output: p.id
                                                         Recheck Cond: (p.cid = 1)
                                                         ->  Bitmap Index Scan on products_cid  (cost=0.00..64.80 rows=4867 width=0) (actual time=2.566..2.566 rows=4861 loops=1)
                                                               Index Cond: (p.cid = 1)
                                       ->  Hash  (cost=91666.01..91666.01 rows=5000001 width=8) (actual time=2328.141..2328.141 rows=5000001 loops=1)
                                             Output: u.id, u.state
                                             Buckets: 262144  Batches: 4  Memory Usage: 48855kB
                                             ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=8) (actual time=0.006..1213.585 rows=5000001 loops=1)
                                                   Output: u.id, u.state
                                 ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.436..0.436 rows=50 loops=1)
                                       Output: st.name, st.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                       ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.417..0.427 rows=50 loops=1)
                                             Output: st.name, st.id
 Total runtime: 14191.200 ms
(41 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=817728.17..817728.32 rows=10 width=20) (actual time=11589.331..11589.331 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=817728.17..817728.32 rows=10 width=20) (actual time=11589.182..11589.189 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=817728.17..817728.20 rows=10 width=20) (actual time=11589.176..11589.180 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=817728.17..820770.05 rows=1216750 width=20) (actual time=11589.175..11589.177 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  GroupAggregate  (cost=764057.77..791434.64 rows=1216750 width=20) (actual time=10869.400..11588.275 rows=4861 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Sort  (cost=764057.77..767099.64 rows=1216750 width=20) (actual time=10869.221..11297.767 rows=1217476 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 39968kB
                                 ->  Hash Join  (cost=923.69..641077.19 rows=1216750 width=20) (actual time=2.744..6337.267 rows=1217476 loops=1)
                                       Output: p.name, s.pid, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.015..2111.647 rows=25000000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=862.85..862.85 rows=4867 width=12) (actual time=2.708..2.708 rows=4861 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 1024  Batches: 1  Memory Usage: 226kB
                                             ->  Bitmap Heap Scan on public.products p  (cost=66.01..862.85 rows=4867 width=12) (actual time=0.380..2.050 rows=4861 loops=1)
                                                   Output: p.name, p.id
                                                   Recheck Cond: (p.cid = 1)
                                                   ->  Bitmap Index Scan on products_cid  (cost=0.00..64.80 rows=4867 width=0) (actual time=0.309..0.309 rows=4861 loops=1)
                                                         Index Cond: (p.cid = 1)
 Total runtime: 11595.888 ms
(29 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=953384.47..991967.96 rows=1714822 width=16) (actual time=1438.163..1438.390 rows=199 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Sort  (cost=953384.47..957671.52 rows=1714822 width=16) (actual time=1438.159..1438.201 rows=1099 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Sort Key: u.state, s.pid
         Sort Method: quicksort  Memory: 100kB
         ->  Hash Join  (cost=749356.43..775817.85 rows=1714822 width=16) (actual time=1437.697..1437.904 rows=1099 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Hash Cond: (st.id = u.state)
               ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.004..0.008 rows=20 loops=1)
                     Output: st.name, st.id, st.price
               ->  Hash  (cost=745660.69..745660.69 rows=295659 width=16) (actual time=1437.647..1437.647 rows=2734 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Buckets: 32768  Batches: 1  Memory Usage: 129kB
                     ->  Merge Join  (cost=584639.08..745660.69 rows=295659 width=16) (actual time=35.786..1434.402 rows=2734 loops=1)
                           Output: u.state, s.pid, s.quantity, s.price
                           Merge Cond: (u.id = s.uid)
                           ->  Index Scan using users_pkey on public.users u  (cost=0.43..144091.45 rows=5000001 width=8) (actual time=0.009..1012.668 rows=4998743 loops=1)
                                 Output: u.id, u.name, u.role, u.age, u.state
                           ->  Sort  (cost=584636.73..585375.88 rows=295659 width=16) (actual time=34.543..35.684 rows=2734 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
                                 Sort Key: s.uid
                                 Sort Method: quicksort  Memory: 225kB
                                 ->  Nested Loop  (cost=4.40..557770.83 rows=295659 width=16) (actual time=2.683..33.786 rows=2734 loops=1)
                                       Output: s.pid, s.quantity, s.price, s.uid
                                       ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.001..0.018 rows=10 loops=1)
                                             Output: p.name, p.id, p.price
                                       ->  Bitmap Heap Scan on public.sales s  (cost=4.40..478.27 rows=255 width=16) (actual time=1.831..3.315 rows=273 loops=10)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                             Recheck Cond: (s.pid = p.id)
                                             ->  Bitmap Index Scan on sales_pid  (cost=0.00..4.33 rows=255 width=0) (actual time=1.782..1.782 rows=273 loops=10)
                                                   Index Cond: (s.pid = p.id)
 Total runtime: 1438.454 ms
(33 rows)

COMMIT
