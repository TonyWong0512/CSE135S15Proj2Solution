BEGIN
SET
SET
CREATE TABLE
CREATE TABLE
INSERT 0 20
INSERT 0 10
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=8100.30..8166.34 rows=6604 width=12) (actual time=42.236..42.252 rows=20 loops=1)
   Output: s.uid, sum((s.quantity * s.price))
   ->  Nested Loop Left Join  (cost=0.00..8050.77 rows=6604 width=12) (actual time=1.960..42.071 rows=113 loops=1)
         Output: s.uid, s.quantity, s.price
         ->  Seq Scan on pg_temp_2.u_t u  (cost=0.00..22.30 rows=1230 width=4) (actual time=0.003..0.013 rows=20 loops=1)
               Output: u.id, u.name
         ->  Index Scan using sales_uid on public.sales s  (cost=0.00..6.48 rows=5 width=12) (actual time=0.446..2.096 rows=6 loops=20)
               Output: s.id, s.uid, s.pid, s.quantity, s.price
               Index Cond: (s.uid = u.id)
 Total runtime: 42.680 ms
(10 rows)

                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=157105.69..159656.89 rows=97617 width=12) (actual time=382.160..382.659 rows=10 loops=1)
   Output: s.pid, sum((s.quantity * s.price))
   ->  Sort  (cost=157105.69..157499.45 rows=157503 width=12) (actual time=382.099..382.298 rows=1231 loops=1)
         Output: s.pid, s.quantity, s.price
         Sort Key: s.pid
         Sort Method: quicksort  Memory: 106kB
         ->  Nested Loop Left Join  (cost=0.00..141969.23 rows=157503 width=12) (actual time=1.408..380.960 rows=1231 loops=1)
               Output: s.pid, s.quantity, s.price
               ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..22.30 rows=1230 width=4) (actual time=0.002..0.008 rows=10 loops=1)
                     Output: p.id, p.name
               ->  Index Scan using sales_pid on public.sales s  (cost=0.00..114.12 rows=128 width=12) (actual time=0.734..37.995 rows=123 loops=10)
                     Output: s.id, s.uid, s.pid, s.quantity, s.price
                     Index Cond: (s.pid = p.id)
 Total runtime: 382.705 ms
(14 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=8304.88..8305.71 rows=83 width=16) (actual time=0.248..0.248 rows=0 loops=1)
   Output: s.uid, s.pid, sum((s.quantity * s.price))
   ->  Hash Join  (cost=8148.70..8304.05 rows=83 width=16) (actual time=0.248..0.248 rows=0 loops=1)
         Output: s.uid, s.pid, s.quantity, s.price
         Hash Cond: (p.id = s.pid)
         ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..22.30 rows=1230 width=4) (actual time=0.003..0.004 rows=10 loops=1)
               Output: p.id, p.name
         ->  Hash  (cost=8066.15..8066.15 rows=6604 width=16) (actual time=0.235..0.235 rows=112 loops=1)
               Output: s.uid, s.pid, s.quantity, s.price
               Buckets: 1024  Batches: 1  Memory Usage: 6kB
               ->  Nested Loop  (cost=0.00..8066.15 rows=6604 width=16) (actual time=0.011..0.200 rows=112 loops=1)
                     Output: s.uid, s.pid, s.quantity, s.price
                     ->  Seq Scan on pg_temp_2.u_t u  (cost=0.00..22.30 rows=1230 width=4) (actual time=0.001..0.006 rows=20 loops=1)
                           Output: u.id, u.name
                     ->  Index Scan using sales_uid on public.sales s  (cost=0.00..6.49 rows=5 width=16) (actual time=0.003..0.006 rows=6 loops=20)
                           Output: s.id, s.uid, s.pid, s.quantity, s.price
                           Index Cond: (s.uid = u.id)
 Total runtime: 0.292 ms
(18 rows)

COMMIT
