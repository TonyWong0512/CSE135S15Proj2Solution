BEGIN
SET
CREATE TABLE
CREATE TABLE
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=1673252.74..1673253.04 rows=20 width=44) (actual time=50991.071..50991.071 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1673252.74..1673253.04 rows=20 width=44) (actual time=50990.948..50990.955 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=1673252.74..1673252.79 rows=20 width=44) (actual time=50990.941..50990.943 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1673252.74..1673255.82 rows=1230 width=44) (actual time=50990.941..50990.942 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=1673207.71..1673220.01 rows=1230 width=44) (actual time=50990.897..50990.912 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Join  (cost=262016.71..1423207.71 rows=25000000 width=44) (actual time=3464.336..42345.321 rows=25000000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (s.uid = u.id)
                                 ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.399..4937.529 rows=25000000 loops=1)
                                       Output: s.quantity, s.price, s.uid
                                 ->  Hash  (cost=160453.70..160453.70 rows=5000001 width=40) (actual time=3462.948..3462.948 rows=5000001 loops=1)
                                       Output: st.name, st.id, u.id
                                       Buckets: 262144  Batches: 4  Memory Usage: 62533kB
                                       ->  Hash Join  (cost=37.67..160453.70 rows=5000001 width=40) (actual time=0.392..2220.769 rows=5000001 loops=1)
                                             Output: st.name, st.id, u.id
                                             Hash Cond: (u.state = st.id)
                                             ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=8) (actual time=0.005..816.638 rows=5000001 loops=1)
                                                   Output: u.id, u.name, u.role, u.age, u.state
                                             ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.374..0.374 rows=50 loops=1)
                                                   Output: st.name, st.id
                                                   Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                                   ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.356..0.361 rows=50 loops=1)
                                                         Output: st.name, st.id
 Total runtime: 50991.211 ms
(30 rows)

                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=5453103.61..5453103.76 rows=10 width=20) (actual time=157031.056..157031.056 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=5453103.61..5453103.76 rows=10 width=20) (actual time=157030.945..157030.952 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=5453103.61..5453103.63 rows=10 width=20) (actual time=157030.940..157030.944 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=5453103.61..5515603.61 rows=25000000 width=20) (actual time=157030.939..157030.943 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  GroupAggregate  (cost=4350362.59..4912862.59 rows=25000000 width=20) (actual time=96721.638..157000.757 rows=100000 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Sort  (cost=4350362.59..4412862.59 rows=25000000 width=20) (actual time=96721.230..151456.354 rows=25000000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 820976kB
                                 ->  Hash Join  (cost=2986.00..912222.00 rows=25000000 width=20) (actual time=48.683..29871.834 rows=25000000 loops=1)
                                       Output: p.name, s.pid, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.456..3160.300 rows=25000000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=1736.00..1736.00 rows=100000 width=12) (actual time=48.195..48.195 rows=100000 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 16384  Batches: 1  Memory Usage: 4649kB
                                             ->  Seq Scan on public.products p  (cost=0.00..1736.00 rows=100000 width=12) (actual time=0.003..27.962 rows=100000 loops=1)
                                                   Output: p.name, p.id
 Total runtime: 157102.647 ms
(26 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=953384.47..991967.96 rows=1714822 width=16) (actual time=2270.993..2271.225 rows=199 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Sort  (cost=953384.47..957671.52 rows=1714822 width=16) (actual time=2270.985..2271.039 rows=1132 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Sort Key: u.state, s.pid
         Sort Method: quicksort  Memory: 102kB
         ->  Hash Join  (cost=749356.43..775817.85 rows=1714822 width=16) (actual time=2270.382..2270.630 rows=1132 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Hash Cond: (st.id = u.state)
               ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.003..0.004 rows=20 loops=1)
                     Output: st.name, st.id, st.price
               ->  Hash  (cost=745660.69..745660.69 rows=295659 width=16) (actual time=2270.341..2270.341 rows=2965 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Buckets: 32768  Batches: 1  Memory Usage: 139kB
                     ->  Merge Join  (cost=584639.08..745660.69 rows=295659 width=16) (actual time=64.719..2265.859 rows=2965 loops=1)
                           Output: u.state, s.pid, s.quantity, s.price
                           Merge Cond: (u.id = s.uid)
                           ->  Index Scan using users_pkey on public.users u  (cost=0.43..144091.45 rows=5000001 width=8) (actual time=0.005..1761.976 rows=4995180 loops=1)
                                 Output: u.id, u.name, u.role, u.age, u.state
                           ->  Sort  (cost=584636.73..585375.88 rows=295659 width=16) (actual time=54.644..56.425 rows=2965 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
                                 Sort Key: s.uid
                                 Sort Method: quicksort  Memory: 235kB
                                 ->  Nested Loop  (cost=4.40..557770.83 rows=295659 width=16) (actual time=3.584..53.621 rows=2965 loops=1)
                                       Output: s.pid, s.quantity, s.price, s.uid
                                       ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.001..0.017 rows=10 loops=1)
                                             Output: p.name, p.id, p.price
                                       ->  Bitmap Heap Scan on public.sales s  (cost=4.40..478.27 rows=255 width=16) (actual time=3.514..5.287 rows=296 loops=10)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                             Recheck Cond: (s.pid = p.id)
                                             ->  Bitmap Index Scan on sales_pid  (cost=0.00..4.33 rows=255 width=0) (actual time=3.461..3.461 rows=296 loops=10)
                                                   Index Cond: (s.pid = p.id)
 Total runtime: 2271.282 ms
(33 rows)

COMMIT
