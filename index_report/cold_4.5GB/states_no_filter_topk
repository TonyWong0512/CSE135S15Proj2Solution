BEGIN
SET
SET
SET
CREATE TABLE
CREATE TABLE
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=1909190.73..1909191.03 rows=20 width=44) (actual time=46745.253..46745.253 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1909190.73..1909191.03 rows=20 width=44) (actual time=46745.161..46745.168 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=1909190.73..1909190.78 rows=20 width=44) (actual time=46745.156..46745.158 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1909190.73..1909193.80 rows=1230 width=44) (actual time=46745.155..46745.155 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=1909145.70..1909158.00 rows=1230 width=44) (actual time=46745.107..46745.120 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Right Join  (cost=173735.70..1659145.70 rows=25000000 width=44) (actual time=2706.448..38882.684 rows=25000000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (u.state = st.id)
                                 ->  Hash Join  (cost=173698.02..1315358.02 rows=25000000 width=12) (actual time=2705.778..33375.075 rows=25000000 loops=1)
                                       Output: u.state, s.quantity, s.price
                                       Hash Cond: (s.uid = u.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.698..6709.614 rows=25000000 loops=1)
                                             Output: s.quantity, s.price, s.uid
                                       ->  Hash  (cost=91666.01..91666.01 rows=5000001 width=8) (actual time=2700.725..2700.725 rows=5000001 loops=1)
                                             Output: u.id, u.state
                                             Buckets: 1024  Batches: 1024  Memory Usage: 200kB
                                             ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=8) (actual time=0.007..1285.319 rows=5000001 loops=1)
                                                   Output: u.id, u.state
                                 ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.663..0.663 rows=50 loops=1)
                                       Output: st.name, st.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                       ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.641..0.647 rows=50 loops=1)
                                             Output: st.name, st.id
 Total runtime: 46745.403 ms
(30 rows)

                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=7801748.61..7801748.76 rows=10 width=20) (actual time=241946.141..241946.141 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=7801748.61..7801748.76 rows=10 width=20) (actual time=241944.285..241944.295 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=7801748.61..7801748.63 rows=10 width=20) (actual time=241944.280..241944.285 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=7801748.61..7864248.61 rows=25000000 width=20) (actual time=241944.279..241944.282 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  GroupAggregate  (cost=6699007.59..7261507.59 rows=25000000 width=20) (actual time=190312.664..241886.962 rows=100000 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Sort  (cost=6699007.59..6761507.59 rows=25000000 width=20) (actual time=190312.384..235561.693 rows=25000000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 821264kB
                                 ->  Hash Right Join  (cost=3475.00..1063592.00 rows=25000000 width=20) (actual time=45.027..19158.318 rows=25000000 loops=1)
                                       Output: p.name, s.pid, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.671..4738.474 rows=25000000 loops=1)
                                             Output: s.pid, s.quantity, s.price
                                       ->  Hash  (cost=1736.00..1736.00 rows=100000 width=12) (actual time=44.234..44.234 rows=100000 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 1024  Batches: 32  Memory Usage: 150kB
                                             ->  Seq Scan on public.products p  (cost=0.00..1736.00 rows=100000 width=12) (actual time=0.003..26.644 rows=100000 loops=1)
                                                   Output: p.name, p.id
 Total runtime: 242124.963 ms
(26 rows)

                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1475121.65..1513705.14 rows=1714822 width=16) (actual time=25757.515..25757.767 rows=199 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Sort  (cost=1475121.65..1479408.70 rows=1714822 width=16) (actual time=25757.508..25757.554 rows=1132 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Sort Key: u.state, s.pid
         Sort Method: quicksort  Memory: 102kB
         ->  Hash Join  (cost=1181712.61..1209628.03 rows=1714822 width=16) (actual time=25755.404..25757.208 rows=1132 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Hash Cond: (st.id = u.state)
               ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.004..0.011 rows=20 loops=1)
                     Output: st.id
               ->  Hash  (cost=1176572.87..1176572.87 rows=295659 width=16) (actual time=25755.283..25755.283 rows=2965 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Buckets: 1024  Batches: 64  Memory Usage: 9kB
                     ->  Hash Join  (cost=1017505.02..1176572.87 rows=295659 width=16) (actual time=22810.840..25751.424 rows=2965 loops=1)
                           Output: u.state, s.pid, s.quantity, s.price
                           Hash Cond: (s.uid = u.id)
                           ->  Hash Join  (cost=843807.00..974911.24 rows=295659 width=16) (actual time=18766.866..20163.840 rows=2965 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
                                 Hash Cond: (p.id = s.pid)
                                 ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.003..0.005 rows=10 loops=1)
                                       Output: p.id
                                 ->  Hash  (cost=409236.00..409236.00 rows=25000000 width=16) (actual time=18623.942..18623.942 rows=25000000 loops=1)
                                       Output: s.pid, s.quantity, s.price, s.uid
                                       Buckets: 1024  Batches: 8192  Memory Usage: 211kB
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=16) (actual time=0.552..5343.357 rows=25000000 loops=1)
                                             Output: s.pid, s.quantity, s.price, s.uid
                           ->  Hash  (cost=91666.01..91666.01 rows=5000001 width=8) (actual time=3150.183..3150.183 rows=5000001 loops=1)
                                 Output: u.state, u.id
                                 Buckets: 1024  Batches: 1024  Memory Usage: 200kB
                                 ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=8) (actual time=0.003..1406.381 rows=5000001 loops=1)
                                       Output: u.state, u.id
 Total runtime: 25757.945 ms
(33 rows)

COMMIT
