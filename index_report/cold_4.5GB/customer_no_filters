BEGIN
SET
SET
CREATE TABLE
CREATE TABLE
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=1909190.73..1909191.03 rows=20 width=44) (actual time=51246.741..51246.741 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1909190.73..1909191.03 rows=20 width=44) (actual time=51246.632..51246.640 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=1909190.73..1909190.78 rows=20 width=44) (actual time=51246.627..51246.629 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1909190.73..1909193.80 rows=1230 width=44) (actual time=51246.625..51246.625 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=1909145.70..1909158.00 rows=1230 width=44) (actual time=51246.582..51246.593 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Right Join  (cost=173735.70..1659145.70 rows=25000000 width=44) (actual time=2121.851..43300.841 rows=25000000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (u.state = st.id)
                                 ->  Hash Join  (cost=173698.02..1315358.02 rows=25000000 width=12) (actual time=2121.413..37592.727 rows=25000000 loops=1)
                                       Output: u.state, s.quantity, s.price
                                       Hash Cond: (s.uid = u.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.379..4922.980 rows=25000000 loops=1)
                                             Output: s.quantity, s.price, s.uid
                                       ->  Hash  (cost=91666.01..91666.01 rows=5000001 width=8) (actual time=2120.350..2120.350 rows=5000001 loops=1)
                                             Output: u.id, u.state
                                             Buckets: 262144  Batches: 4  Memory Usage: 48855kB
                                             ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=8) (actual time=0.006..1121.339 rows=5000001 loops=1)
                                                   Output: u.id, u.state
                                 ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.433..0.433 rows=50 loops=1)
                                       Output: st.name, st.id
                                       Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                       ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.416..0.424 rows=50 loops=1)
                                             Output: st.name, st.id
 Total runtime: 51246.832 ms
(30 rows)

                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=5379861.11..5379861.26 rows=10 width=20) (actual time=230507.007..230507.007 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=5379861.11..5379861.26 rows=10 width=20) (actual time=230506.895..230506.901 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=5379861.11..5379861.13 rows=10 width=20) (actual time=230506.890..230506.892 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=5379861.11..5442361.11 rows=25000000 width=20) (actual time=230506.888..230506.889 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  GroupAggregate  (cost=4277120.09..4839620.09 rows=25000000 width=20) (actual time=131399.799..230311.519 rows=100000 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Sort  (cost=4277120.09..4339620.09 rows=25000000 width=20) (actual time=131398.991..220794.418 rows=25000000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 820976kB
                                 ->  Hash Right Join  (cost=2986.00..912222.00 rows=25000000 width=20) (actual time=42.918..40974.697 rows=25000000 loops=1)
                                       Output: p.name, s.pid, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.415..5334.594 rows=25000000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=1736.00..1736.00 rows=100000 width=12) (actual time=42.477..42.477 rows=100000 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 16384  Batches: 1  Memory Usage: 4649kB
                                             ->  Seq Scan on public.products p  (cost=0.00..1736.00 rows=100000 width=12) (actual time=0.003..25.511 rows=100000 loops=1)
                                                   Output: p.name, p.id
 Total runtime: 230624.577 ms
(26 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=670573.54..709157.04 rows=1714822 width=16) (actual time=2561.280..2561.497 rows=199 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Sort  (cost=670573.54..674860.60 rows=1714822 width=16) (actual time=2561.274..2561.325 rows=1132 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Sort Key: u.state, s.pid
         Sort Method: quicksort  Memory: 102kB
         ->  Hash Join  (cost=466545.50..493006.92 rows=1714822 width=16) (actual time=2560.835..2561.023 rows=1132 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Hash Cond: (st.id = u.state)
               ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.005..0.006 rows=20 loops=1)
                     Output: st.name, st.id, st.price
               ->  Hash  (cost=462849.76..462849.76 rows=295659 width=16) (actual time=2560.788..2560.788 rows=2965 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Buckets: 32768  Batches: 1  Memory Usage: 139kB
                     ->  Merge Join  (cost=315540.77..462849.76 rows=295659 width=16) (actual time=49.538..2554.605 rows=2965 loops=1)
                           Output: u.state, s.pid, s.quantity, s.price
                           Merge Cond: (u.id = s.uid)
                           ->  Index Scan using users_pkey on public.users u  (cost=0.43..130378.45 rows=5000001 width=8) (actual time=0.007..2010.889 rows=4995180 loops=1)
                                 Output: u.id, u.name, u.role, u.age, u.state
                           ->  Sort  (cost=315538.60..316277.75 rows=295659 width=16) (actual time=46.415..49.856 rows=2965 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
                                 Sort Key: s.uid
                                 Sort Method: quicksort  Memory: 235kB
                                 ->  Nested Loop  (cost=0.44..288672.69 rows=295659 width=16) (actual time=1.428..45.259 rows=2965 loops=1)
                                       Output: s.pid, s.quantity, s.price, s.uid
                                       ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.002..0.019 rows=10 loops=1)
                                             Output: p.name, p.id, p.price
                                       ->  Index Scan using sales_pid on public.sales s  (cost=0.44..246.29 rows=255 width=16) (actual time=1.406..4.441 rows=296 loops=10)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                             Index Cond: (s.pid = p.id)
 Total runtime: 2561.552 ms
(31 rows)

COMMIT
