BEGIN
SET
SET
CREATE TABLE
CREATE TABLE
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.u_t  (cost=1758767.06..1758767.36 rows=20 width=26) (actual time=67847.941..67847.941 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1758767.06..1758767.36 rows=20 width=26) (actual time=67847.787..67847.799 rows=20 loops=1)
         Output: "*SELECT*".uid, "*SELECT*".name, "*SELECT*".price
         ->  Limit  (cost=1758767.06..1758767.11 rows=20 width=26) (actual time=67847.782..67847.784 rows=20 loops=1)
               Output: s2.uid, u.name, (sum((s2.quantity * s2.price)))
               ->  Sort  (cost=1758767.06..1771267.06 rows=5000001 width=26) (actual time=67847.780..67847.782 rows=20 loops=1)
                     Output: s2.uid, u.name, (sum((s2.quantity * s2.price)))
                     Sort Key: (sum((s2.quantity * s2.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  GroupAggregate  (cost=1513218.81..1625718.83 rows=5000001 width=26) (actual time=56855.749..66716.447 rows=5000001 loops=1)
                           Output: s2.uid, u.name, sum((s2.quantity * s2.price))
                           ->  Sort  (cost=1513218.81..1525718.81 rows=5000001 width=26) (actual time=56855.734..64132.815 rows=5136617 loops=1)
                                 Output: s2.uid, u.name, s2.quantity, s2.price
                                 Sort Key: s2.uid, u.name
                                 Sort Method: external merge  Disk: 140136kB
                                 ->  Hash Right Join  (cost=184372.71..888521.27 rows=5000001 width=26) (actual time=2308.290..15549.706 rows=5136617 loops=1)
                                       Output: s2.uid, u.name, s2.quantity, s2.price
                                       Hash Cond: (s2.uid = u.id)
                                       ->  Hash Join  (cost=909.69..641063.19 rows=1216750 width=12) (actual time=35.474..9137.612 rows=1217476 loops=1)
                                             Output: s2.uid, s2.quantity, s2.price
                                             Hash Cond: (s2.pid = p.id)
                                             ->  Seq Scan on public.sales s2  (cost=0.00..409236.00 rows=25000000 width=16) (actual time=0.583..3786.147 rows=25000000 loops=1)
                                                   Output: s2.id, s2.uid, s2.pid, s2.quantity, s2.price
                                             ->  Hash  (cost=848.85..848.85 rows=4867 width=4) (actual time=34.834..34.834 rows=4861 loops=1)
                                                   Output: p.id
                                                   Buckets: 1024  Batches: 1  Memory Usage: 171kB
                                                   ->  Bitmap Heap Scan on public.products p  (cost=52.01..848.85 rows=4867 width=4) (actual time=2.483..33.601 rows=4861 loops=1)
                                                         Output: p.id
                                                         Recheck Cond: (p.cid = 1)
                                                         ->  Bitmap Index Scan on products_cid  (cost=0.00..50.79 rows=4867 width=0) (actual time=2.366..2.366 rows=4861 loops=1)
                                                               Index Cond: (p.cid = 1)
                                       ->  Hash  (cost=91666.01..91666.01 rows=5000001 width=18) (actual time=2272.074..2272.074 rows=5000001 loops=1)
                                             Output: u.name, u.id
                                             Buckets: 262144  Batches: 4  Memory Usage: 63502kB
                                             ->  Seq Scan on public.users u  (cost=0.00..91666.01 rows=5000001 width=18) (actual time=0.007..1137.866 rows=5000001 loops=1)
                                                   Output: u.name, u.id
 Total runtime: 67869.585 ms
(37 rows)

                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=5504861.11..5504861.41 rows=20 width=20) (actual time=204981.768..204981.768 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=5504861.11..5504861.41 rows=20 width=20) (actual time=204976.231..204976.245 rows=20 loops=1)
         Output: "*SELECT*".pid, "*SELECT*".name, "*SELECT*".price
         ->  Limit  (cost=5504861.11..5504861.16 rows=20 width=20) (actual time=204976.223..204976.231 rows=20 loops=1)
               Output: s.pid, p.name, (sum((s.quantity * s.price)))
               ->  Sort  (cost=5504861.11..5567361.11 rows=25000000 width=20) (actual time=204976.222..204976.229 rows=20 loops=1)
                     Output: s.pid, p.name, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  GroupAggregate  (cost=4277120.09..4839620.09 rows=25000000 width=20) (actual time=121679.553..204903.282 rows=100000 loops=1)
                           Output: s.pid, p.name, sum((s.quantity * s.price))
                           ->  Sort  (cost=4277120.09..4339620.09 rows=25000000 width=20) (actual time=121679.047..197281.768 rows=25000000 loops=1)
                                 Output: s.pid, p.name, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 820976kB
                                 ->  Hash Join  (cost=2986.00..912222.00 rows=25000000 width=20) (actual time=27.509..38728.527 rows=25000000 loops=1)
                                       Output: s.pid, p.name, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..409236.00 rows=25000000 width=12) (actual time=0.021..5132.470 rows=25000000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=1736.00..1736.00 rows=100000 width=12) (actual time=27.473..27.473 rows=100000 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 16384  Batches: 1  Memory Usage: 4649kB
                                             ->  Seq Scan on public.products p  (cost=0.00..1736.00 rows=100000 width=12) (actual time=0.000..13.091 rows=100000 loops=1)
                                                   Output: p.name, p.id
 Total runtime: 205091.499 ms
(26 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=8990.49..8991.36 rows=87 width=16) (actual time=21.226..21.226 rows=0 loops=1)
   Output: s.uid, s.pid, sum((s.quantity * s.price))
   ->  Hash Join  (cost=8793.15..8989.62 rows=87 width=16) (actual time=21.223..21.223 rows=0 loops=1)
         Output: s.uid, s.pid, s.quantity, s.price
         Hash Cond: (p.id = s.pid)
         ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.004..0.006 rows=20 loops=1)
               Output: p.id, p.name, p.price
         ->  Hash  (cost=8700.71..8700.71 rows=7395 width=16) (actual time=21.207..21.207 rows=117 loops=1)
               Output: s.uid, s.pid, s.quantity, s.price
               Buckets: 1024  Batches: 1  Memory Usage: 6kB
               ->  Nested Loop  (cost=0.44..8700.71 rows=7395 width=16) (actual time=2.218..20.982 rows=117 loops=1)
                     Output: s.uid, s.pid, s.quantity, s.price
                     ->  Seq Scan on pg_temp_2.u_t u  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.001..0.025 rows=20 loops=1)
                           Output: u.id, u.name, u.price
                     ->  Index Scan using sales_uid on public.sales s  (cost=0.44..7.42 rows=6 width=16) (actual time=0.996..1.040 rows=6 loops=20)
                           Output: s.id, s.uid, s.pid, s.quantity, s.price
                           Index Cond: (s.uid = u.id)
 Total runtime: 21.280 ms
(18 rows)

COMMIT
