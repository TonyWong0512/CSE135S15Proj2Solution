BEGIN
CREATE TABLE
CREATE TABLE
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.s_t  (cost=289013.74..289014.04 rows=20 width=44) (actual time=15479.913..15479.913 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=289013.74..289014.04 rows=20 width=44) (actual time=15479.753..15479.760 rows=20 loops=1)
         Output: "*SELECT*".name, "*SELECT*".id, "*SELECT*".price
         ->  Limit  (cost=289013.74..289013.79 rows=20 width=44) (actual time=15479.749..15479.753 rows=20 loops=1)
               Output: st.name, st.id, (sum((s.quantity * s.price)))
               ->  Sort  (cost=289013.74..289016.82 rows=1230 width=44) (actual time=15479.748..15479.750 rows=20 loops=1)
                     Output: st.name, st.id, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 26kB
                     ->  HashAggregate  (cost=288968.71..288981.01 rows=1230 width=44) (actual time=15479.650..15479.660 rows=50 loops=1)
                           Output: st.name, st.id, sum((s.quantity * s.price))
                           ->  Hash Join  (cost=44620.71..238968.71 rows=5000000 width=44) (actual time=967.856..13106.992 rows=5000000 loops=1)
                                 Output: st.name, st.id, s.quantity, s.price
                                 Hash Cond: (s.uid = u.id)
                                 ->  Seq Scan on public.sales s  (cost=0.00..81848.00 rows=5000000 width=12) (actual time=0.655..1392.019 rows=5000000 loops=1)
                                       Output: s.id, s.uid, s.pid, s.quantity, s.price
                                 ->  Hash  (cost=32120.70..32120.70 rows=1000001 width=40) (actual time=966.815..966.815 rows=1000001 loops=1)
                                       Output: st.name, st.id, u.id
                                       Buckets: 131072  Batches: 1  Memory Usage: 49998kB
                                       ->  Hash Join  (cost=37.67..32120.70 rows=1000001 width=40) (actual time=0.584..597.213 rows=1000001 loops=1)
                                             Output: st.name, st.id, u.id
                                             Hash Cond: (u.state = st.id)
                                             ->  Seq Scan on public.users u  (cost=0.00..18333.01 rows=1000001 width=8) (actual time=0.006..251.054 rows=1000001 loops=1)
                                                   Output: u.id, u.name, u.role, u.age, u.state
                                             ->  Hash  (cost=22.30..22.30 rows=1230 width=36) (actual time=0.564..0.564 rows=50 loops=1)
                                                   Output: st.name, st.id
                                                   Buckets: 1024  Batches: 1  Memory Usage: 3kB
                                                   ->  Seq Scan on public.states st  (cost=0.00..22.30 rows=1230 width=36) (actual time=0.542..0.546 rows=50 loops=1)
                                                         Output: st.name, st.id
 Total runtime: 15481.796 ms
(30 rows)

                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on pg_temp_2.p_t  (cost=1086572.12..1086572.27 rows=10 width=19) (actual time=46038.749..46038.749 rows=0 loops=1)
   ->  Subquery Scan on "*SELECT*"  (cost=1086572.12..1086572.27 rows=10 width=19) (actual time=46033.780..46033.801 rows=10 loops=1)
         Output: "*SELECT*".name, "*SELECT*".pid, "*SELECT*".price
         ->  Limit  (cost=1086572.12..1086572.14 rows=10 width=19) (actual time=46033.010..46033.015 rows=10 loops=1)
               Output: p.name, s.pid, (sum((s.quantity * s.price)))
               ->  Sort  (cost=1086572.12..1099072.12 rows=5000000 width=19) (actual time=46031.799..46031.803 rows=10 loops=1)
                     Output: p.name, s.pid, (sum((s.quantity * s.price)))
                     Sort Key: (sum((s.quantity * s.price)))
                     Sort Method: top-N heapsort  Memory: 25kB
                     ->  GroupAggregate  (cost=866023.92..978523.92 rows=5000000 width=19) (actual time=34102.774..46018.765 rows=10000 loops=1)
                           Output: p.name, s.pid, sum((s.quantity * s.price))
                           ->  Sort  (cost=866023.92..878523.92 rows=5000000 width=19) (actual time=34102.221..44324.733 rows=5000000 loops=1)
                                 Output: p.name, s.pid, s.quantity, s.price
                                 Sort Key: s.pid, p.name
                                 Sort Method: external merge  Disk: 146608kB
                                 ->  Hash Join  (cost=299.00..207147.00 rows=5000000 width=19) (actual time=3.863..8552.372 rows=5000000 loops=1)
                                       Output: p.name, s.pid, s.quantity, s.price
                                       Hash Cond: (s.pid = p.id)
                                       ->  Seq Scan on public.sales s  (cost=0.00..81848.00 rows=5000000 width=12) (actual time=0.905..1448.181 rows=5000000 loops=1)
                                             Output: s.id, s.uid, s.pid, s.quantity, s.price
                                       ->  Hash  (cost=174.00..174.00 rows=10000 width=11) (actual time=2.936..2.936 rows=10000 loops=1)
                                             Output: p.name, p.id
                                             Buckets: 1024  Batches: 1  Memory Usage: 430kB
                                             ->  Seq Scan on public.products p  (cost=0.00..174.00 rows=10000 width=11) (actual time=0.008..1.390 rows=10000 loops=1)
                                                   Output: p.name, p.id
 Total runtime: 46066.059 ms
(26 rows)

                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=338453.19..343447.69 rows=499450 width=16) (actual time=4997.997..4998.592 rows=200 loops=1)
   Output: u.state, s.pid, sum((s.quantity * s.price))
   ->  Hash Join  (cost=252832.13..304776.14 rows=3367705 width=16) (actual time=4996.900..4997.386 rows=2217 loops=1)
         Output: u.state, s.pid, s.quantity, s.price
         Hash Cond: (st.id = u.state)
         ->  Seq Scan on pg_temp_2.s_t st  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.006..0.011 rows=20 loops=1)
               Output: st.name, st.id, st.price
         ->  Hash  (cost=245574.14..245574.14 rows=580639 width=16) (actual time=4996.702..4996.702 rows=5528 loops=1)
               Output: u.state, s.pid, s.quantity, s.price
               Buckets: 65536  Batches: 1  Memory Usage: 260kB
               ->  Hash Join  (cost=199596.02..245574.14 rows=580639 width=16) (actual time=4113.915..4995.084 rows=5528 loops=1)
                     Output: u.state, s.pid, s.quantity, s.price
                     Hash Cond: (s.uid = u.id)
                     ->  Hash Join  (cost=168763.00..201676.74 rows=580639 width=16) (actual time=3409.008..4276.223 rows=5528 loops=1)
                           Output: s.pid, s.quantity, s.price, s.uid
                           Hash Cond: (p.id = s.pid)
                           ->  Seq Scan on pg_temp_2.p_t p  (cost=0.00..21.60 rows=1160 width=4) (actual time=0.003..0.075 rows=10 loops=1)
                                 Output: p.id
                           ->  Hash  (cost=81848.00..81848.00 rows=5000000 width=16) (actual time=3407.712..3407.712 rows=5000000 loops=1)
                                 Output: s.pid, s.quantity, s.price, s.uid
                                 Buckets: 262144  Batches: 4  Memory Usage: 59070kB
                                 ->  Seq Scan on public.sales s  (cost=0.00..81848.00 rows=5000000 width=16) (actual time=0.708..1665.679 rows=5000000 loops=1)
                                       Output: s.pid, s.quantity, s.price, s.uid
                     ->  Hash  (cost=18333.01..18333.01 rows=1000001 width=8) (actual time=704.743..704.743 rows=1000001 loops=1)
                           Output: u.state, u.id
                           Buckets: 131072  Batches: 1  Memory Usage: 39063kB
                           ->  Seq Scan on public.users u  (cost=0.00..18333.01 rows=1000001 width=8) (actual time=0.000..374.958 rows=1000001 loops=1)
                                 Output: u.state, u.id
 Total runtime: 4999.280 ms
(29 rows)

COMMIT
